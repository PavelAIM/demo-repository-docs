### USER
–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤ —Ñ–∞–π–ª–µ. 

### ASSISTANT
=== –†–µ–∑—é–º–µ –∑–∞–ø—Ä–æ—Å–∞ ===
–ù—É–∂–µ–Ω –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ OpenWebUI —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ [1] - —Å PostgreSQL, OAuth, RBAC, SSL, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ Dev/Prod —Å—Ä–µ–¥—ã, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —á–µ—Ä–µ–∑ Grafana –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ —Å Telegram/Slack.

–î–∞–≤–∞–π –ø–æ–ª—É—á—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é OpenWebUI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.

<function_calls>
<invoke name="Docs">
<parameter name="id">/open-webui/docs</parameter>
</invoke>
</function_calls>
<function_result>
Tool `server:0/tool_resolve_docs_post` Output: I'll retrieve the documentation for Open WebUI to help you create a proper installation script based on your corporate configuration requirements.

Available Documentation Sections:

### Core Installation & Configuration:
- **Installation Guide**: Multiple deployment methods including Docker, Kubernetes, bare metal
- **Configuration**: Environment variables, database setup, authentication
- **Database Configuration**: PostgreSQL, MySQL, SQLite options
- **Authentication**: OAuth providers (Google, GitHub, Microsoft, OIDC), LDAP, SAML
- **Security**: SSL/TLS setup, security headers, API keys management

### Enterprise Features:
- **User Management**: Role-based access control (RBAC), user permissions
- **Multi-tenancy**: Organization management, workspace isolation  
- **Monitoring**: Health checks, metrics, logging configuration
- **Backup & Recovery**: Database backup strategies, data migration

### Advanced Configuration:
- **Environment Variables**: Complete reference for all configuration options
- **Docker Compose**: Production-ready compose files with external databases
- **Kubernetes**: Helm charts and manifest examples
- **Reverse Proxy**: Nginx, Traefik, Apache configurations with SSL

### Integration & Extensions:
- **API Integration**: External model providers, custom endpoints
- **Webhooks**: Event notifications, integrations with external systems
- **Pipeline Extensions**: Custom processing workflows

Which specific area would you like me to focus on for your corporate installation script? Based on your requirements, I should prioritize:

1. **PostgreSQL database configuration**
2. **OAuth authentication setup** 
3. **SSL/TLS termination**
4. **Role-based access control**
5. **Multi-environment deployment (Dev/Prod)**
6. **Monitoring integration**

Would you like me to retrieve specific documentation sections to create a comprehensive installation script?
</function_result>

–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á—É –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å PostgreSQL –∏ OAuth:

<function_calls>
<invoke name="Docs">
<parameter name="id">/open-webui/docs</parameter>
<parameter name="query">PostgreSQL database configuration OAuth authentication docker-compose production RBAC SSL environment variables</parameter>
</invoke>
</function_calls>
<function_calls>
<invoke name="Docs">
<parameter name="id">/open-webui/docs</parameter>
<parameter name="query">corporate enterprise installation production deployment monitoring logging</parameter>
</invoke>
</function_calls>

=== –°–∫—Ä–∏–ø—Ç ===

```bash
#!/bin/bash

# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenWebUI —Å PostgreSQL, OAuth, RBAC
# –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenWebUI
# –í–µ—Ä—Å–∏—è: 2024-12

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -eq 0 ]]; then
   error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π —Å–∫—Ä–∏–ø—Ç –ø–æ–¥ root! –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å sudo."
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ—é —Å—Ä–µ–¥—É)
ENVIRONMENT="${1:-dev}"  # dev –∏–ª–∏ prod
DOMAIN="${2:-openwebui.local}"
OAUTH_PROVIDER="${3:-google}"  # google, github, microsoft, oidc
DB_PASSWORD=$(openssl rand -base64 32 | tr -d '=' | head -c 24)
JWT_SECRET=$(openssl rand -hex 32)
WEBHOOK_SECRET=$(openssl rand -hex 16)

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [[ ! "$ENVIRONMENT" =~ ^(dev|prod)$ ]]; then
    error "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π: dev –∏–ª–∏ prod"
fi

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É OpenWebUI"
log "–°—Ä–µ–¥–∞: $ENVIRONMENT | –î–æ–º–µ–Ω: $DOMAIN | OAuth: $OAUTH_PROVIDER"

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
sudo apt update && sudo apt upgrade -y
sudo apt install -y \
    docker.io docker-compose-plugin \
    postgresql-client \
    nginx \
    certbot python3-certbot-nginx \
    htop curl wget git \
    jq unzip

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
sudo usermod -aG docker $USER

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
log "üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
sudo apt install -y postgresql postgresql-contrib
sudo systemctl enable postgresql
sudo systemctl start postgresql

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
sudo -u postgres psql << EOF
CREATE DATABASE openwebui_${ENVIRONMENT};
CREATE USER openwebui_${ENVIRONMENT} WITH ENCRYPTED PASSWORD '${DB_PASSWORD}';
GRANT ALL PRIVILEGES ON DATABASE openwebui_${ENVIRONMENT} TO openwebui_${ENVIRONMENT};
ALTER USER openwebui_${ENVIRONMENT} CREATEDB;
\q
EOF

# 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤
log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤..."
mkdir -p ~/openwebui-${ENVIRONMENT}/{config,data,logs,ssl,backups}
cd ~/openwebui-${ENVIRONMENT}

# 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose..."

# –û—Å–Ω–æ–≤–Ω–æ–π docker-compose.yml
cat > docker-compose.yml << EOF
version: '3.8'

services:
  openwebui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: openwebui-${ENVIRONMENT}
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:8080"
    volumes:
      - ./data:/app/backend/data
      - ./config:/app/backend/config
      - ./logs:/app/backend/logs
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://openwebui_${ENVIRONMENT}:${DB_PASSWORD}@host.docker.internal:5432/openwebui_${ENVIRONMENT}
      
      # Security
      - WEBUI_SECRET_KEY=${JWT_SECRET}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      
      # Authentication
      - ENABLE_SIGNUP=false
      - DEFAULT_USER_ROLE=pending
      - ENABLE_OAUTH_SIGNUP=true
      
      # OAuth Configuration (–Ω–∞—Å—Ç—Ä–æ–π –≤ .env)
      - OAUTH_PROVIDER=${OAUTH_PROVIDER}
      
      # Features
      - ENABLE_RAG_HYBRID_SEARCH=true
      - ENABLE_RAG_WEB_LOADER=true
      - ENABLE_WEB_SEARCH=true
      
      # Logging
      - WEBUI_LOG_LEVEL=INFO
      - LOG_REQUESTS=true
      
      # Performance
      - MAX_UPLOAD_SIZE=100
      - REQUEST_TIMEOUT=300
      
      # Security Headers
      - ENABLE_SECURITY_HEADERS=true
      - ENABLE_HTTPS_REDIRECT=true
      
      # Admin
      - ADMIN_EMAIL=admin@${DOMAIN}
      
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - openwebui-network

  # Grafana –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-${ENVIRONMENT}
    restart: unless-stopped
    ports:
      - "127.0.0.1:3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${DB_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - openwebui-network

  # Prometheus –¥–ª—è –º–µ—Ç—Ä–∏–∫
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-${ENVIRONMENT}
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - openwebui-network

networks:
  openwebui-network:
    driver: bridge

volumes:
  grafana-data:
  prometheus-data:
EOF

# 5. –§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
log "üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
cat > .env << EOF
# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenWebUI - ${ENVIRONMENT}
# –°–æ–∑–¥–∞–Ω–æ: $(date)

# OAuth Configuration - –ù–ê–°–¢–†–û–ô –ü–û–î –°–í–û–ò –î–ê–ù–ù–´–ï!
# Google OAuth
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# GitHub OAuth  
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# Microsoft OAuth
MICROSOFT_CLIENT_ID=your-microsoft-client-id
MICROSOFT_CLIENT_SECRET=your-microsoft-client-secret

# OIDC (–Ω–∞–ø—Ä–∏–º–µ—Ä, Keycloak)
OIDC_CLIENT_ID=your-oidc-client-id
OIDC_CLIENT_SECRET=your-oidc-client-secret
OIDC_PROVIDER_URL=https://your-oidc-provider.com/auth/realms/master

# Integrations
TELEGRAM_BOT_TOKEN=your-telegram-bot-token
SLACK_BOT_TOKEN=your-slack-bot-token

# Generated Secrets (–ù–ï –ú–ï–ù–Ø–ô!)
DB_PASSWORD=${DB_PASSWORD}
JWT_SECRET=${JWT_SECRET}
WEBHOOK_SECRET=${WEBHOOK_SECRET}

# Domain
DOMAIN=${DOMAIN}
ENVIRONMENT=${ENVIRONMENT}
EOF

# 6. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prometheus
log "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
mkdir -p config
cat > config/prometheus.yml << EOF
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'openwebui'
    static_configs:
      - targets: ['openwebui-${ENVIRONMENT}:8080']
    metrics_path: '/metrics'
    scrape_interval: 30s

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['host.docker.internal:9100']
EOF

# 7. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx
log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx reverse proxy..."
sudo tee /etc/nginx/sites-available/openwebui-${ENVIRONMENT} << EOF
server {
    listen 80;
    server_name ${DOMAIN};
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name ${DOMAIN};

    # SSL Configuration (–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    # OpenWebUI
    location / {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        
        # WebSocket support
        proxy_set_header Sec-WebSocket-Extensions \$http_sec_websocket_extensions;
        proxy_set_header Sec-WebSocket-Key \$http_sec_websocket_key;
        proxy_set_header Sec-WebSocket-Version \$http_sec_websocket_version;
    }

    # Grafana (–ø–æ–¥–¥–æ–º–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    location /grafana/ {
        proxy_pass http://127.0.0.1:3002/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–π—Ç–∞
sudo ln -sf /etc/nginx/sites-available/openwebui-${ENVIRONMENT} /etc/nginx/sites-enabled/
sudo nginx -t || error "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx!"

# 8. –°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
log "üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."

# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
cat > start.sh << 'EOF'
#!/bin/bash
set -e
source .env
echo "üöÄ –ó–∞–ø—É—Å–∫ OpenWebUI (${ENVIRONMENT})..."
docker compose up -d
echo "‚úÖ OpenWebUI –∑–∞–ø—É—â–µ–Ω!"
echo "üåê –î–æ—Å—Ç—É–ø: https://${DOMAIN}"
echo "üìä Grafana: https://${DOMAIN}/grafana (admin:${DB_PASSWORD})"
EOF

# –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
cat > stop.sh << 'EOF'
#!/bin/bash
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenWebUI..."
docker compose down
echo "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
EOF

# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
cat > update.sh << 'EOF'
#!/bin/bash
set -e
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ OpenWebUI..."
docker compose pull
docker compose up -d
echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!"
EOF

# –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞
cat–ü—Ä–æ–¥–æ–ª–∂—É —Å–∫—Ä–∏–ø—Ç - –æ–Ω –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞:

```bash
# –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞
cat > backup.sh << 'EOF'
#!/bin/bash
set -e
source .env

BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="./backups/${BACKUP_DATE}"

echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ OpenWebUI..."
mkdir -p "$BACKUP_DIR"

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üìä –ë—ç–∫–∞–ø PostgreSQL..."
pg_dump -h localhost -U openwebui_${ENVIRONMENT} -d openwebui_${ENVIRONMENT} > "${BACKUP_DIR}/database.sql"

# –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "üìÅ –ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤..."
tar -czf "${BACKUP_DIR}/data.tar.gz" ./data
tar -czf "${BACKUP_DIR}/config.tar.gz" ./config
cp .env "${BACKUP_DIR}/"
cp docker-compose.yml "${BACKUP_DIR}/"

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find ./backups -type d -mtime +30 -exec rm -rf {} +

echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_DIR"
EOF

# –ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
chmod +x *.sh

# 9. –ü–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
log "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
if [[ "$ENVIRONMENT" == "prod" ]]; then
    warn "–î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç..."
    sudo certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --email admin@"$DOMAIN"
else
    warn "–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç..."
    sudo mkdir -p /etc/letsencrypt/live/"$DOMAIN"
    sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/letsencrypt/live/"$DOMAIN"/privkey.pem \
        -out /etc/letsencrypt/live/"$DOMAIN"/fullchain.pem \
        -subj "/C=RU/ST=Moscow/L=Moscow/O=OpenWebUI/CN=$DOMAIN"
fi

# 10. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –¥–ª—è –∞–≤—Ç–æ–±—ç–∫–∞–ø–æ–≤
log "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
(crontab -l 2>/dev/null; echo "0 2 * * * cd ~/openwebui-${ENVIRONMENT} && ./backup.sh >> logs/backup.log 2>&1") | crontab -

# 11. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥—Ä–æ—Ç–∞—Ü–∏–∏
log "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤..."
sudo tee /etc/logrotate.d/openwebui-${ENVIRONMENT} << EOF
~/openwebui-${ENVIRONMENT}/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
}
EOF

# 12. –°–æ–∑–¥–∞–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
log "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞..."
sudo tee /etc/systemd/system/openwebui-${ENVIRONMENT}.service << EOF
[Unit]
Description=OpenWebUI ${ENVIRONMENT}
Requires=docker.service postgresql.service
After=docker.service postgresql.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$HOME/openwebui-${ENVIRONMENT}
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down
User=$USER
Group=docker

[Install]
WantedBy=multi-user.target
EOF

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
sudo systemctl daemon-reload
sudo systemctl enable openwebui-${ENVIRONMENT}.service

# 13. –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±
log "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–ª—É–∂–±..."
sudo systemctl restart nginx
sudo systemctl start openwebui-${ENVIRONMENT}.service

# 14. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ
cat > INSTALLATION_INFO.md << EOF
# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenWebUI - ${ENVIRONMENT}

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ
- **–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏**: $(date)
- **–°—Ä–µ–¥–∞**: ${ENVIRONMENT}
- **–î–æ–º–µ–Ω**: ${DOMAIN}
- **OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä**: ${OAUTH_PROVIDER}

## üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö**: openwebui_${ENVIRONMENT}
- **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î**: openwebui_${ENVIRONMENT}
- **–ü–∞—Ä–æ–ª—å –ë–î**: ${DB_PASSWORD}
- **Grafana admin**: ${DB_PASSWORD}

## üåê –î–æ—Å—Ç—É–ø
- **–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å**: https://${DOMAIN}
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Grafana)**: https://${DOMAIN}/grafana
- **–ú–µ—Ç—Ä–∏–∫–∏ (Prometheus)**: http://localhost:9090 (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)

## üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
\`\`\`bash
# –ó–∞–ø—É—Å–∫
./start.sh

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞  
./stop.sh

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
./update.sh

# –ë—ç–∫–∞–ø
./backup.sh

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
docker compose logs -f openwebui

# –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±
sudo systemctl status openwebui-${ENVIRONMENT}
\`\`\`

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth
1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª .env
2. –î–æ–±–∞–≤—å —Å–≤–æ–∏ OAuth credentials
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏: ./stop.sh && ./start.sh

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- Grafana: https://${DOMAIN}/grafana (admin:${DB_PASSWORD})
- –õ–æ–≥–∏: ./logs/
- –ë—ç–∫–∞–ø—ã: ./backups/

## üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª—É–∂–±—ã
- **OpenWebUI**: systemctl status openwebui-${ENVIRONMENT}
- **PostgreSQL**: systemctl status postgresql
- **Nginx**: systemctl status nginx

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞
- –õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ~/openwebui-${ENVIRONMENT}/logs/
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ~/openwebui-${ENVIRONMENT}/config/
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.openwebui.com
EOF

# 15. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±
if curl -sSf http://localhost:3001/health > /dev/null 2>&1; then
    log "‚úÖ OpenWebUI —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    warn "‚ö†Ô∏è OpenWebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏: docker compose logs openwebui"
fi

if curl -sSf http://localhost:3002 > /dev/null 2>&1; then
    log "‚úÖ Grafana —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    warn "‚ö†Ô∏è Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
fi

if sudo nginx -t > /dev/null 2>&1; then
    log "‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
else
    warn "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Nginx"
fi

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
echo -e "\n${GREEN}üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!${NC}\n"
echo -e "${BLUE}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ:${NC}"
echo -e "üåê URL: https://${DOMAIN}"
echo -e "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: https://${DOMAIN}/grafana"
echo -e "üîê Grafana –ø–∞—Ä–æ–ª—å: ${DB_PASSWORD}"
echo -e "üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ~/openwebui-${ENVIRONMENT}"
echo -e "\n${YELLOW}‚ö†Ô∏è –í–ê–ñ–ù–û:${NC}"
echo -e "1. –ù–∞—Å—Ç—Ä–æ–π OAuth –≤ —Ñ–∞–π–ª–µ .env"
echo -e "2. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–∞ –≤ DNS"
echo -e "3. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –æ–±–Ω–æ–≤–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
echo -e "4. –ü—Ä–æ—á–∏—Ç–∞–π INSTALLATION_INFO.md"
echo -e "\n${GREEN}üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ: INSTALLATION_INFO.md${NC}"

log "üèÅ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ OpenWebUI –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
```

=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===

**‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–π –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π VM!**

1. **üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:**
   ```bash
   bash -n corporate_install.sh
   ```

2. **üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (Dev):**
   ```bash
   chmod +x corporate_install.sh
   ./corporate_install.sh dev openwebui-dev.local google
   ```

3. **üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±:**
   ```bash
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
   docker compose ps
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
   docker compose logs -f
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   psql -h localhost -U openwebui_dev -d openwebui_dev -c "\dt"
   ```

4. **üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:**
   ```bash
   curl -I http://localhost:3001/health
   curl -I http://localhost:3002  # Grafana
   ```

5. **üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
   ```bash
   ./stop.sh && ./start.sh
   ./backup.sh
   ```

=== –û–±—ä—è—Å–Ω–µ–Ω–∏–µ ===

–°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç **–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É OpenWebUI** —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:

**üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**
- **PostgreSQL** –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ë–î –≤–º–µ—Å—Ç–æ SQLite
- **OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è** (Google/GitHub/Microsoft/OIDC)
- **RBAC** —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
- **SSL/TLS** —á–µ—Ä–µ–∑ Nginx reverse proxy
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** —á–µ—Ä–µ–∑ Grafana + Prometheus

**üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
- Security headers –≤ Nginx
- SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (Let's Encrypt –¥–ª—è prod, —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–ª—è dev)
- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–º (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ proxy)

**üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –±—ç–∫–∞–ø—ã:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã —á–µ—Ä–µ–∑ cron
- –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
- Health checks –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
- –ú–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ Prometheus

**üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
- –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è start/stop/update/backup
- Systemd-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ dev/prod —Å—Ä–µ–¥—ã

=== –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ===

**‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:**

1. **üîë –ù–∞—Å—Ç—Ä–æ–π OAuth credentials –≤ .env —Ñ–∞–π–ª–µ** - –±–µ–∑ —ç—Ç–æ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!

2. **üåê –ù–∞—Å—Ç—Ä–æ–π DNS** - –¥–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–≤–æ–π —Å–µ—Ä–≤–µ—Ä

3. **üîí –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞** - –ø–æ–ª—É—á–∏ –≤–∞–ª–∏–¥–Ω—ã–π SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç

4. **üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
   - –°–º–µ–Ω–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
   - –ù–∞—Å—Ç—Ä–æ–π —Ñ–∞–π—Ä–≤–æ–ª (ufw/iptables)
   - –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã

5. **üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
   - –ù–∞—Å—Ç—Ä–æ–π –∞–ª–µ—Ä—Ç—ã –≤ Grafana
   - –ü—Ä–æ–≤–µ—Ä—å –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è –ª–æ–≥–æ–≤/–±—ç–∫–∞–ø–æ–≤

6. **üíæ –ë—ç–∫–∞–ø—ã:**
   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
   - –ù–∞—Å—Ç—Ä–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤

**üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
- –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–æ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Å–æ—Ö—Ä–∞–Ω–∏ –∏—Ö!
- PostgreSQL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Docker (host.docker.internal)
- –î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSL

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∞—Å—Ç–∏ - —Å–∫–∞–∂–∏! üòä